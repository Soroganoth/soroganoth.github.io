[{"content":"Working as a cloud security architect in a consulting role in Norway.\nInterest areas are:\nAzure/Azure AD Attacker TTPs Cloud Security with some dabbling in Web Application Security and Kubernetes Security\nCertifications: Microsoft: SC-100: Cybersecurity Architect Expert AZ-500: Azure Security Engineer Associate MS-500: Security Administrator Associate SC-200: Security Operations Analyst Associate Hashicorp Terraform Associate Linux Foundation Certified Kubernetes Administrator Pentester Academy Certified Az AD Red Team Professional (CARTP) Certified Azure Web Application Security Professional (CAWASP) ","permalink":"https://soroganoth.com/about/abooutme/","summary":"Working as a cloud security architect in a consulting role in Norway.\nInterest areas are:\nAzure/Azure AD Attacker TTPs Cloud Security with some dabbling in Web Application Security and Kubernetes Security\nCertifications: Microsoft: SC-100: Cybersecurity Architect Expert AZ-500: Azure Security Engineer Associate MS-500: Security Administrator Associate SC-200: Security Operations Analyst Associate Hashicorp Terraform Associate Linux Foundation Certified Kubernetes Administrator Pentester Academy Certified Az AD Red Team Professional (CARTP) Certified Azure Web Application Security Professional (CAWASP) ","title":"About Me"},{"content":"I recently found myself needing to create some Azure watchlists using Bicep templates.\nAs there did not seem to be much documentation about this, and my lacking understanding of child resources in Bicep, this took way longer then it needed to be, so i figured I would document this.\nMicrosoft Bicep Watchlist Reference: Bicep Reference\nQuick Comments about the template A Watchlist cannot be empty, so you need to some example value. The Source property does not seem to to do anything, but for whatever reason needs to be \u0026quot;Remote Storage\u0026quot; or \u0026quot;Local File\u0026quot;.\nDeploy with new Workspace This caused me some confusion because in the Azure portal watchlists can only be accessed from the Sentinel workspace. As such one may think it would be a child resource for the Sentinel workspace. It is in fact not, but a child resource of log analytics. This then requires some advanced-ish Bicep usage as this is a child resource of the log analytics workspace, but also depends on the sentinel solution.\nExample template for deploying Log Analytics workspace, with Sentinel and a Watchlist.\n//api docs https://docs.microsoft.com/en-us/azure/templates/microsoft.compute/virtualmachines?tabs=bicep // The workspace name can contain only letters, numbers and \u0026#39;-\u0026#39;. The \u0026#39;-\u0026#39; shouldn\u0026#39;t be the first or the last symbol. param workspacename string param location string = \u0026#39;norwayeast\u0026#39; param retentionInDays int = 365 // Log analytics workspace resource loganalyticsworkspace \u0026#39;Microsoft.OperationalInsights/workspaces@2021-06-01\u0026#39; = { name: \u0026#39;${workspacename}LA\u0026#39; location: location properties: { sku: { name: \u0026#39;PerGB2018\u0026#39; } retentionInDays: retentionInDays } } // End of Log Analytics workspace // Sentinel resource sentinelsolution \u0026#39;Microsoft.OperationsManagement/solutions@2015-11-01-preview\u0026#39; = { name: \u0026#39;SecurityInsights(${loganalyticsworkspace.name})\u0026#39; location: location plan: { name: \u0026#39;SecurityInsights(${loganalyticsworkspace.name})\u0026#39; product: \u0026#39;OMSGallery/SecurityInsights\u0026#39; publisher: \u0026#39;Microsoft\u0026#39; promotionCode: \u0026#39;\u0026#39; } properties: { workspaceResourceId: loganalyticsworkspace.id } } resource watchlist1 \u0026#39;Microsoft.SecurityInsights/watchlists@2021-04-01\u0026#39; = { name: \u0026#39;list1\u0026#39; scope: loganalyticsworkspace dependsOn: [ sentinelsolution ] properties: { contentType: \u0026#39;text/csv\u0026#39; defaultDuration: \u0026#39;30\u0026#39; description: \u0026#39;test1\u0026#39; displayName: \u0026#39;test1\u0026#39; isDeleted: false itemsSearchKey: \u0026#39;ExampleSearchKey\u0026#39; numberOfLinesToSkip: 0 provider: \u0026#39;Whatever\u0026#39; rawContent: \u0026#39;ExampleSearchKey\\nExampleValue\u0026#39; source: \u0026#39;Remote storage\u0026#39; watchlistAlias: \u0026#39;TST1\u0026#39; } } Deploy to existing workspaces The template is pretty simple, however the parent value needs to be a resource datatype, not just a string. This is why you need the placeholder of the existing workspace.\nparam workspacename string resource loganalyticsworkspace \u0026#39;Microsoft.OperationalInsights/workspaces@2021-06-01\u0026#39; existing = { name: workspacename } resource watchlist1 \u0026#39;Microsoft.SecurityInsights/watchlists@2021-04-01\u0026#39; = { name: \u0026#39;list2\u0026#39; scope: loganalyticsworkspace properties: { contentType: \u0026#39;text/csv\u0026#39; defaultDuration: \u0026#39;30\u0026#39; description: \u0026#39;test2\u0026#39; displayName: \u0026#39;test2\u0026#39; itemsSearchKey: \u0026#39;ExampleSearchKey\u0026#39; numberOfLinesToSkip: 0 provider: \u0026#39;Whatever\u0026#39; rawContent: \u0026#39;ExampleSearchKey\\nExampleValue\u0026#39; source: \u0026#39;Local file\u0026#39; watchlistAlias: \u0026#39;TST2\u0026#39; } } ","permalink":"https://soroganoth.com/post/shorts/sentinel_bicep_watchlist/","summary":"I recently found myself needing to create some Azure watchlists using Bicep templates.\nAs there did not seem to be much documentation about this, and my lacking understanding of child resources in Bicep, this took way longer then it needed to be, so i figured I would document this.\nMicrosoft Bicep Watchlist Reference: Bicep Reference\nQuick Comments about the template A Watchlist cannot be empty, so you need to some example value.","title":"Deploy Azure Sentinel Watchlists with Bicep"},{"content":"Intro The goal of this article is to dig deeper into some poorly documented and non-obvious security aspects of Azure Active Directory Applications, particularly regarding multi tenant applications.\nThis is not a comprehensive guide about application and service principal security, but an overview of some security properties which I find non-obvious and of interest to attackers and defender.\nIf you are not familiar with the basic concepts of Applications and Service principals in Azure AD, I suggest starting with the documentation. https://learn.microsoft.com/en-us/azure/active-directory/develop/application-model\nThe very TLDR of this is that App Registrations are simply the definition of an app. When an app is created a service principal is also created with it. The Service Principal is the \u0026quot;securable object\u0026quot; that actually holds permissions. Microsoft documentation will sometimes treat these as the same thing, which causes some confusion that is very pertinent for this post. I try to be very explicit about the difference between these two in this article.\nSingle Tenant Perspective Jumping in After creating a multi-tenant app we get some basic info about our sample application.\nGet-AzADApplication -DisplayName \u0026#34;Crosstenant-app\u0026#34; DisplayName Id AppId ----------- -- ----- Crosstenant-App 7bb7fbe2-c75f-4372-a2e6-e3f2bfea38d1 fd518bbc-8b0d-48a0-afc3-d59ebdc5e9eb Get-AzADServicePrincipal -DisplayName \u0026#34;Crosstenant-app\u0026#34; | select Displayname, Appid, ID DisplayName AppId Id ----------- ----- -- Crosstenant-App fd518bbc-8b0d-48a0-afc3-d59ebdc5e9eb 97510906-bf60-40ba-8111-9c136c4c7363 Note that while the AppId is the same, the IDs are not. This is because the application and its associated service principal are separate objects in Azure AD. The AppId functions as the username of the service principal. The fact that these two are different comes with some interesting distinctions among them are semi-hidden credentials.\nNormally when you create credentials for an app, you go to app registrations in the Azure portal and register new creds under the Certificates \u0026amp; Secrets tab.\nGet-AzADAppCredential -ObjectId 7bb7fbe2-c75f-4372-a2e6-e3f2bfea38d1 CustomKeyIdentifier DisplayName EndDateTime Hint KeyId SecretText StartDateTime ------------------- ----------- ----------- ---- ----- ---------- ------------- blogg-test 08/09/2023 16:52:51 EKx 8f77bed7-a8e0-400e-957c-be6de2ba3b21 02/10/2023 17:52:51 The objectid for this commandlet is the Id of the App registration.\nThis credential allows logging in as the service principal, including for cross tenant access. Note that this credential is used by the service principal, but is registered to the app registration itself. This is a relevant distinction because you can also register credentials for the service principal itself, not for application registration.\nThe potential dangers this presents for privilege escalation has been noted before.\nhttps://dirkjanm.io/azure-ad-privilege-escalation-application-admin/\nIt is not clear to me why Microsoft decided it should be possible to add credentials to these “hidden” service principals, or directly to service principals in general. I’m very curious about what use case in which this makes sense. I have seen some first party Azure/Microsoft services do this for their own service principal, so from a detection standpoint there are some false positives.\nPrivilege escalation via Applications and service principals is a big topic that I won’t dive into in this post. However it is worth remembering that App Registrations and Service Principals are different objects, both of which can be assigned Owner roles.\nThis means that the “Owners” tab of an App Registration is not the same as the “Owners” tab of the Service Principal in Enterprise Applications. Owners are allowed to create credentials without having any of the Application Admin roles.\nOwners of the Service Principal can only create credentials of the Service Principal itself, not for the App registration, and vice versa.\nFor a single tenant perspective this is irrelevant as these credentials have the same permissions, but as we will see later, this does have some consequence in multi-tenant applications.\nSemi-hidden credentials An important takeaway is that for any application that exists in App registrations in your Azure portal, there can exist credentials both for the App registration itself, and for the underlying service principal.\nIf the App registration is not from your tenant, but you are using a third-party app, then credentials can exist for any Service principal in the Enterprise applications tab in the portal(after dirk-jan's blog post some limitations have been applied to Microsoft 1st party service principals).\nWhile the Application registration only lives in a single home tenant, the service principal is the “securable object” aka the thing that actually holds permissions. This means that for a globally unique Application, a different service principal exists in each tenant.\nThis is explained here: https://learn.microsoft.com/en-us/azure/active-directory/develop/app-objects-and-service-principals#relationship-between-application-objects-and-service-principals\nChecking for both types of credentials for the same apps shows while there is a set of credentials for the app registration, none (yet) exists for the service principal.\nPS /home/soroganoth\u0026gt; Get-AzADAppCredential -ObjectId 7bb7fbe2-c75f-4372-a2e6-e3f2bfea38d1 CustomKeyIdentifier DisplayName EndDateTime Hint KeyId SecretText StartDateTime ------------------- ----------- ----------- ---- ----- ---------- ------------- blogg-test 08/09/2023 16:52:51 EKx 8f77bed7-a8e0-400e-957c-be6de2ba3b21 02/10/2023 17:52:51 PS /home/soroganoth\u0026gt; Get-AzADServicePrincipalCredential -ObjectId 97510906-bf60-40ba-8111-9c136c4c7363 PS /home/soroganoth\u0026gt; The object id of Get-AzADServicePrincipalCredential is the id of the service principal\nThe Commandlet Get-AzADAppCredential checks for creds registered in the app registration, while the commandlet Get-AzADServicePrincipalCredential checks for creds on the service principal object itself.\nCreating creds for the service principal.\nPS /home/soroganoth\u0026gt; New-azadspcredential -ObjectId 97510906-bf60-40ba-8111-9c136c4c7363 | fl CustomKeyIdentifier : DisplayName : EndDateTime : 02/11/2025 13:28:47 Hint : guv KeyId : daffb636-6774-48ff-bfc6-e276ae81c766 SecretText : nosecretforu StartDateTime : 02/11/2023 13:28:47 AdditionalProperties : {[@odata.context, https://graph.microsoft.com/v1.0/$metadata#microsoft.graph.passwordCredential]} We have now created credentials for the service principal itself, and not the application registration.\nPS /home/soroganoth\u0026gt; Get-AzADAppCredential -ObjectId 7bb7fbe2-c75f-4372-a2e6-e3f2bfea38d1 CustomKeyIdentifier DisplayName EndDateTime Hint KeyId SecretText StartDateTime ------------------- ----------- ----------- ---- ----- ---------- ------------- blogg-test 08/09/2023 16:52:51 EKx 8f77bed7-a8e0-400e-957c-be6de2ba3b21 02/10/2023 17:52:51 PS /home/soroganoth\u0026gt; Get-AzADServicePrincipalCredential -ObjectId 97510906-bf60-40ba-8111-9c136c4c7363 CustomKeyIdentifier DisplayName EndDateTime Hint KeyId SecretText StartDateTime ------------------- ----------- ----------- ---- ----- ---------- ------------- 02/11/2025 13:28:47 guv daffb636-6774-48ff-bfc6-e276ae81c766 02/11/2023 13:28:47 For the application in the portal, nothing has changed\nChecking the manifest only shows one set of credentials\n{ // Removed for brevity \u0026#34;keyCredentials\u0026#34;: [], \u0026#34;name\u0026#34;: \u0026#34;Crosstenant-App\u0026#34;, \u0026#34;passwordCredentials\u0026#34;: [ { \u0026#34;customKeyIdentifier\u0026#34;: null, \u0026#34;endDate\u0026#34;: \u0026#34;2023-08-09T16:52:51.287Z\u0026#34;, \u0026#34;keyId\u0026#34;: \u0026#34;8f77bed7-a8e0-400e-957c-be6de2ba3b21\u0026#34;, \u0026#34;startDate\u0026#34;: \u0026#34;2023-02-10T17:52:51.287Z\u0026#34;, \u0026#34;value\u0026#34;: null, \u0026#34;createdOn\u0026#34;: \u0026#34;2023-02-10T17:52:55.6424548Z\u0026#34;, \u0026#34;hint\u0026#34;: \u0026#34;EKx\u0026#34;, \u0026#34;displayName\u0026#34;: \u0026#34;blogg-test\u0026#34; } ], // Removed for brevity In the Enterprise Applications part of the Azure I have not found anywhere to display the credentials now registered for the service principal.\nThis means that while not exactly well hidden, the average Azure admin is not likely to stumble upon them.\nThis affords threat actors a persistence method which is probably not well understood by admins, SecOps and IR teams.\nKQL for the different operations Adding Credentials to an Application Registration\nAuditLogs | where OperationName == \u0026#34;Update application – Certificates and secrets management \u0026#34; Note that there is a trailing whitespace here, without it this query fails. This is likely a bug and may change in the future.\nAdding credentials to the Service Principal (if this happens a lot in your tenant, I really wondering why)\nAuditLogs | where OperationName == \u0026#34;Add service principal credentials\u0026#34; Adding owner for Service Principal\nAuditLogs | where OperationName == \u0026#34;Add owner to service principal\u0026#34; Adding owner for App registration\nAuditLogs | where OperationName == \u0026#34;Add owner to application\u0026#34; Checking access tokens JWTs\nDecoded JWT from App registration creds\n{ \u0026#34;typ\u0026#34;: \u0026#34;JWT\u0026#34;, \u0026#34;nonce\u0026#34;: \u0026#34;D6m6_7pckByYBBqZ92pzGS0EllfMKcYkNmcJIqwiJNA\u0026#34;, \u0026#34;alg\u0026#34;: \u0026#34;RS256\u0026#34;, \u0026#34;x5t\u0026#34;: \u0026#34;-KI3Q9nNR7bRofxmeZoXqbHZGew\u0026#34;, \u0026#34;kid\u0026#34;: \u0026#34;-KI3Q9nNR7bRofxmeZoXqbHZGew\u0026#34; }.{ \u0026#34;aud\u0026#34;: \u0026#34;https://graph.microsoft.com\u0026#34;, \u0026#34;iss\u0026#34;: \u0026#34;https://sts.windows.net/69853a0f-0ff9-42b8-9170-ad4634237146/\u0026#34;, \u0026#34;iat\u0026#34;: 1676115525, \u0026#34;nbf\u0026#34;: 1676115525, \u0026#34;exp\u0026#34;: 1676119425, \u0026#34;aio\u0026#34;: \u0026#34;E2ZgYNB/uLsy2PWn61v9PR1nH/sEAQA=\u0026#34;, \u0026#34;app_displayname\u0026#34;: \u0026#34;Crosstenant-App\u0026#34;, \u0026#34;appid\u0026#34;: \u0026#34;fd518bbc-8b0d-48a0-afc3-d59ebdc5e9eb\u0026#34;, \u0026#34;appidacr\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;idp\u0026#34;: \u0026#34;https://sts.windows.net/69853a0f-0ff9-42b8-9170-ad4634237146/\u0026#34;, \u0026#34;idtyp\u0026#34;: \u0026#34;app\u0026#34;, \u0026#34;oid\u0026#34;: \u0026#34;97510906-bf60-40ba-8111-9c136c4c7363\u0026#34;, \u0026#34;rh\u0026#34;: \u0026#34;0.AU4ADzqFafkPuEKRcK1GNCNxRgMAAAAAAAAAwAAAAAAAAACDAAA.\u0026#34;, \u0026#34;roles\u0026#34;: [ \u0026#34;User.Read.All\u0026#34; ], \u0026#34;sub\u0026#34;: \u0026#34;97510906-bf60-40ba-8111-9c136c4c7363\u0026#34;, \u0026#34;tenant_region_scope\u0026#34;: \u0026#34;EU\u0026#34;, \u0026#34;tid\u0026#34;: \u0026#34;69853a0f-0ff9-42b8-9170-ad4634237146\u0026#34;, \u0026#34;uti\u0026#34;: \u0026#34;bpsBhnb0IEC0oYl0SLs0AA\u0026#34;, \u0026#34;ver\u0026#34;: \u0026#34;1.0\u0026#34;, \u0026#34;wids\u0026#34;: [ \u0026#34;0997a1d0-0d1d-4acb-b408-d5ca73121e90\u0026#34; ], \u0026#34;xms_tcdt\u0026#34;: 1673029163, \u0026#34;xms_tdbr\u0026#34;: \u0026#34;EU\u0026#34; }.[Signature] Decoded JWT from Service Principal Creds\n{ \u0026#34;typ\u0026#34;: \u0026#34;JWT\u0026#34;, \u0026#34;nonce\u0026#34;: \u0026#34;45spjjliy4a_3TLdkhnMTmhyU0mJ1aedRZH9dIDIDp4\u0026#34;, \u0026#34;alg\u0026#34;: \u0026#34;RS256\u0026#34;, \u0026#34;x5t\u0026#34;: \u0026#34;-KI3Q9nNR7bRofxmeZoXqbHZGew\u0026#34;, \u0026#34;kid\u0026#34;: \u0026#34;-KI3Q9nNR7bRofxmeZoXqbHZGew\u0026#34; }.{ \u0026#34;aud\u0026#34;: \u0026#34;https://graph.microsoft.com\u0026#34;, \u0026#34;iss\u0026#34;: \u0026#34;https://sts.windows.net/69853a0f-0ff9-42b8-9170-ad4634237146/\u0026#34;, \u0026#34;iat\u0026#34;: 1676122368, \u0026#34;nbf\u0026#34;: 1676122368, \u0026#34;exp\u0026#34;: 1676126268, \u0026#34;aio\u0026#34;: \u0026#34;E2ZgYNBMnOfELl4ipNkUc/vW8f/PAQ==\u0026#34;, \u0026#34;app_displayname\u0026#34;: \u0026#34;Crosstenant-App\u0026#34;, \u0026#34;appid\u0026#34;: \u0026#34;fd518bbc-8b0d-48a0-afc3-d59ebdc5e9eb\u0026#34;, \u0026#34;appidacr\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;idp\u0026#34;: \u0026#34;https://sts.windows.net/69853a0f-0ff9-42b8-9170-ad4634237146/\u0026#34;, \u0026#34;idtyp\u0026#34;: \u0026#34;app\u0026#34;, \u0026#34;oid\u0026#34;: \u0026#34;97510906-bf60-40ba-8111-9c136c4c7363\u0026#34;, \u0026#34;rh\u0026#34;: \u0026#34;0.AU4ADzqFafkPuEKRcK1GNCNxRgMAAAAAAAAAwAAAAAAAAACDAAA.\u0026#34;, \u0026#34;roles\u0026#34;: [ \u0026#34;User.Read.All\u0026#34; ], \u0026#34;sub\u0026#34;: \u0026#34;97510906-bf60-40ba-8111-9c136c4c7363\u0026#34;, \u0026#34;tenant_region_scope\u0026#34;: \u0026#34;EU\u0026#34;, \u0026#34;tid\u0026#34;: \u0026#34;69853a0f-0ff9-42b8-9170-ad4634237146\u0026#34;, \u0026#34;uti\u0026#34;: \u0026#34;hC0SUfHmk0qOqKDv-7ErAA\u0026#34;, \u0026#34;ver\u0026#34;: \u0026#34;1.0\u0026#34;, \u0026#34;wids\u0026#34;: [ \u0026#34;0997a1d0-0d1d-4acb-b408-d5ca73121e90\u0026#34; ], \u0026#34;xms_tcdt\u0026#34;: 1673029163, \u0026#34;xms_tdbr\u0026#34;: \u0026#34;EU\u0026#34; }.[Signature] Diffing the access tokens shows no real difference beyond values you would expect to change. They seem to be functionally the same credentials, with the only real difference being that one of them is included in the manifest of the application.\nSingle tenant Logs As you would expect both sign ins show up in the logs with the same service principal ID, which makes sense as both credentials are using the same username.\nThe Credential key ID is different between the two sign-ins, as you would expect. Beyond that there does not seem to be any information to differentiate between the two types of credentials.\nMulti-tenant differences Having looked at the differences between Service Principals and App Registrations from a single tenant perspective, from a multi-tenant perspective start becoming real weird.\nIn this situation the \u0026quot;Crosstenant-App\u0026quot; we have been working with so far is registered in the home tenant, and is now being approved for access by a customer tenant.\nBasics of how an app knows which tenant its accessing Firstly, a cross-tenant application defines the tenant it is accessing by the URL it fetches an access token from\nhttps://login.microsoftonline.com/\u0026lt;tenantidhere\u0026gt;/oauth2/v2.0/token So different tenants require different access tokens. The client_id, or username is however the same across all tenants.\nIf you have created a cross-tenant app, an admin from a different tenant can approve this app into their tenant and grant access via the admin consent URL\nhttps://login.microsoftonline.com/organizations/v2.0/adminconsent?client_id=\u0026lt;your client id\u0026gt;\u0026amp;scope=https://graph.microsoft.com/.default (there are a few different ways of creating a consent URL https://learn.microsoft.com/en-us/azure/active-directory/manage-apps/grant-admin-consent?pivots=portal)\nThis creates a service principal in that tenant. An App Registration is not created as this exists only in the home tenant.\nRunning as the admin in the customer tenant we can now see a service principal with the same AppId (as this is globally unique in Azure), but a different Id.\nPS /home/soroganoth\u0026gt; Get-AzADServicePrincipal -displayName \u0026#34;Crosstenant-app\u0026#34; | select Displayname, Appid, ID DisplayName AppId Id ----------- ----- -- Crosstenant-App fd518bbc-8b0d-48a0-afc3-d59ebdc5e9eb 190d3268-6f11-49e6-8c14-4da10c9cc0c6 Even though this is an app from a different tenant, we can still create credentials for this Service Principal in our customer tenant. This is pretty weird behaviour which should probably be a detection use case for SecOps teams.\nPS /home/soroganoth\u0026gt; new-azadspcredential -ObjectId 190d3268-6f11-49e6-8c14-4da10c9cc0c6 | fl CustomKeyIdentifier : DisplayName : EndDateTime : 02/11/2025 17:29:08 Hint : 3Wi KeyId : 67135e6e-e725-4950-9a00-63d6dcbf8b79 SecretText : nosecretforu StartDateTime : 02/11/2023 17:29:08 AdditionalProperties : {[@odata.context, https://graph.microsoft.com/v1.0/$metadata#microsoft.graph.passwordCredential]} This allows us to get an access token to acts as this service principal in our own tenant (as the customer in this setting), with all its associated permissions.\nTrying to use this client to gain access to the home tenant will not work (we are still using the same AppId as the username in all of these logins, regardless of which tenant we are in).\nFrom the perspective of the home tenant, things are different depending on whether you are using the credentials from the app registration or the service principal.\nOnly the credentials from the app registration is included the in the manifest which is approved by customer admins, and only this credential can be used to access the customer tenant. Trying to get an access token to a customer tenant with the credentials registered directly to the service principal fails with an error of “invalid secret”.\nFor an attacker this means that creating creds for the service principal is useful for a single tenant scenario, but does not allow for supply-chain attacks to customer tenants.\nLogging surprise I was quite surprise to note that these logins from the credentials created in the customer tenant, was also logged in the home tenant.\nCustomer Tenant logs\nHome tenant logs\nNote identical Request and correlation ID.\nSurprisingly the home tenant can see the Service Principal ID, despite it existing in a customer tenant.\nSame Service Principal name, but with different IDs from different tenants\nThere are some interesting differences. The home tenant logs do not contain the Credential key ID field, while the customer tenant contains both Resource service principal ID and Credential key ID.\nThe Resource service principal ID is the local service principal for the resource, in this case it is the customer tenants Microsoft Graph Service Principal Id.\nLooking at the same logs in log analytics I can see that a TenantId is included. This does not seem to be connected to any of the tenants and it does not have an OIDC config in Azure at\nhttps://login.microsoftonline.com/\u0026lt;tenantid\u0026gt;/v2.0/.well-known/openid-configuration\nHaving done some testing across different tenants and apps, the value seems to differ, but none of them seem to resolve to an actual TenantId.\nFrom a Managed Service Provider perspective these logs are limiting. I have not done any major testing, but the lack of a Credential key ID seems to be abnormal for Service Principal logins, and could be used to detect someone in a customer tenant logging in as your application (which should be a very rare anomaly), it does not actually tell you what tenant this is happening in. If you have only one app per customer, this is pretty simple.\nIf you have a multi-tenant App, there are things you can do. As the sign in logs in your tenant shows the service Principal ID, you can correlate that with the sub claim in the access token.\nCreate a script to get access token for each customer tenant and grab the sub claim from all the access tokens and map out which customer environments they belong to. This is very much a hack due poor logging on Microsoft's part.\nSimple KQL to detect lacking Credential ID\nAADServicePrincipalSignInLogs | where ServicePrincipalCredentialKeyId == \u0026#34;\u0026#34; Customer Permissions Escalation The owners and app admins of an App Registration can add permissions to an app without having the permission to consent for service principal to actually have these permissions.\nPermissions added but not consented\nHowever these permissions have now been included in the manifest, and if we send the admin consent URL to a customer admin again, they will be asked to give these permissions to the app.\nThis means that while the Owner of an application registration in Azure is not able to consent to the permissions in their own Azure tenant, they are indirectly able to do so in customer environments. This is non-obvious behaviour which service providers should take note of.\nRounding up Overall there are quite a few aspects of the security properties of applications in Azure AD which were surprising to me, and is likely to be a pitfall in securing Azure environments.\nAppendix: All KQL Searches:\nAdding Credentials to an Application Registration\nAuditLogs | where OperationName == \u0026#34;Update application – Certificates and secrets management \u0026#34; Note that there is a trailing whitespace here, without it this query fails. This is likely a bug and may change in the future.\nAdding credentials to the Service Principal (if this happens a lot in your tenant, I really wondering why)\nAuditLogs | where OperationName == \u0026#34;Add service principal credentials\u0026#34; Adding owner for Service Principal\nAuditLogs | where OperationName == \u0026#34;Add owner to service principal\u0026#34; Adding owner for App registration\nAuditLogs | where OperationName == \u0026#34;Add owner to application\u0026#34; Simple KQL to detect lacking Credential ID\nAADServicePrincipalSignInLogs | where ServicePrincipalCredentialKeyId == \u0026#34;\u0026#34; ","permalink":"https://soroganoth.com/post/research/multi_tenant_applications_security/","summary":"Intro The goal of this article is to dig deeper into some poorly documented and non-obvious security aspects of Azure Active Directory Applications, particularly regarding multi tenant applications.\nThis is not a comprehensive guide about application and service principal security, but an overview of some security properties which I find non-obvious and of interest to attackers and defender.\nIf you are not familiar with the basic concepts of Applications and Service principals in Azure AD, I suggest starting with the documentation.","title":"Deep dive into some interesting security properties Azure AD cross-tenant applications"}]